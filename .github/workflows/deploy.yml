name: Deploy go-db-demo to VM (over Tailscale)

on:
  push:
    branches: [ "main" ]   # deploys only when you push to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout source
      - uses: actions/checkout@v4

      # 2. Set up Go
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # 3. Build Linux binary
      - name: Build go-db-demo
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 \
          go build -ldflags="-s -w" -o go-db-demo ./web/cmd

      # 4. Join your tailnet
      - name: Join Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_CLIENT_SECRET }}
          tags: tag:ci
          version: "1.66.4"
          use-cache: 'true'
          
   
      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -T 15 "${{ secrets.TS_HOST }}" 2>/dev/null | tee -a ~/.ssh/known_hosts >/dev/null
          cat > ~/.ssh/ci_key << 'EOF'
          ${{ secrets.DEPLOY_SSH_KEY }}
          EOF
          chmod 600 ~/.ssh/ci_key    

      # 5. Add VM host key to known_hosts (avoids prompt)
      - name: Trust VM host key
        run: ssh-keyscan -T 15 "${{ secrets.TS_HOST }}" >> ~/.ssh/known_hosts

      # 6. Load CI private key
      - name: Load deploy key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      # 7. Upload binary & migrations folder
      - name: Upload app (+migrations)
        run: |
          ssh -i ~/.ssh/ci_key -o StrictHostKeyChecking=accept-new \
          deploy@${{ secrets.TS_HOST }} 'mkdir -p /var/www/go-db-demo/db/migrations'
          rsync -az --delete \
            -e 'ssh -i ~/.ssh/ci_key -o StrictHostKeyChecking=accept-new' \
            go-db-demo \
            deploy@${{ secrets.TS_HOST }}:/var/www/go-db-demo/
          rsync -az \
            -e 'ssh -i ~/.ssh/ci_key -o StrictHostKeyChecking=accept-new' \
            internal/db/migrations/ \
            deploy@${{ secrets.TS_HOST }}:/var/www/go-db-demo/db/migrations/
            
      - name: Upload templates
        run: |
          ssh -i ~/.ssh/ci_key -o StrictHostKeyChecking=accept-new \
            deploy@${{ secrets.TS_HOST }} 'mkdir -p /var/www/go-db-demo/web/templates'
          rsync -az \
            -e 'ssh -i ~/.ssh/ci_key -o StrictHostKeyChecking=accept-new' \
            web/templates/ \
            deploy@${{ secrets.TS_HOST }}:/var/www/go-db-demo/web/templates/
      
            

      - name: Run DB migrations
        run: |
          ssh -i ~/.ssh/ci_key -o StrictHostKeyChecking=accept-new \
            deploy@${{ secrets.TS_HOST }} '
              set -e
              cd /var/www/go-db-demo
              set -a; . ./.env; set +a
              for f in $(ls -1 db/migrations/*up.sql 2>/dev/null | sort); do
                echo "Applying $f"
                PGPASSWORD="$DB_PASSWORD" psql \
                  -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" \
                  -v ON_ERROR_STOP=1 -f "$f"
            done
          '


      # 8. Restart the systemd service
      - name: Restart service
        run: |
          ssh deploy@${{ secrets.TS_HOST }} '
            sudo systemctl daemon-reload
            sudo systemctl restart go-db-demo
            systemctl --no-pager -l status go-db-demo || true
          '

      # 9. Health check (optional, ensure service responds)
      - name: Health check (remote, verbose)
        run: |
          set -e
          ssh -i ~/.ssh/ci_key -o StrictHostKeyChecking=accept-new deploy@${{ secrets.TS_HOST }} '
          code=$(curl -sS -o /tmp/hc_body.txt -w "%{http_code}" http://127.0.0.1:8080/)
          echo "HTTP $code"
          echo "--- body ---"
          sed -n "1,200p" /tmp/hc_body.txt || true
          echo "------------"
          if [ "$code" -lt 200 ] || [ "$code" -ge 300 ]; then
            echo "Recent app logs:" >&2
            journalctl -u go-db-demo -n 80 --no-pager >&2 || true
            exit 1
          fi
          '


