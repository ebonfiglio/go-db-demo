name: Simple Deploy to Ubuntu VM

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-mod-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-mod-${{ runner.os }}-

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Build application
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o go-db-demo ./web/cmd

      - name: Connect to Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_CLIENT_SECRET }}
          tags: tag:ci

      - name: Check required secrets
        env:
            TS_HOST: ${{ secrets.TS_HOST }}
            DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_NAME: ${{ secrets.DB_NAME }}
        run: |
            set -euo pipefail
            missing=0
            for var in TS_HOST DEPLOY_SSH_KEY DB_USER DB_PASSWORD DB_NAME; do
            if [ -z "${!var:-}" ]; then
                echo "ERROR: $var is missing"
                missing=1
            fi
            done
            if [ "$missing" -eq 1 ]; then
            echo "Add the missing secrets in your repo settings."
            exit 1
            fi
            echo "All secrets present"


      - name: Setup SSH
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.TS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Ensure .env File Exists
        run: |
          set -euo pipefail
          HOST="${{ secrets.TS_HOST }}"
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy@"$HOST" \
            DB_USER="${{ secrets.DB_USER }}" \
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            DB_NAME="${{ secrets.DB_NAME }}" \
            bash -s <<'EOF'
            set -euo pipefail

            APP_DIR="$HOME/app"
            ENV_FILE="$APP_DIR/.env"

            # Always recreate .env file
            echo "Recreating .env file..."
            mkdir -p "$APP_DIR"
            cat > "$ENV_FILE" <<'ENVEOF'
            SERVER_HOST=0.0.0.0
            SERVER_PORT=8080
            GIN_MODE=release
            DB_HOST=localhost
            DB_PORT=5432
            DB_USER=${DB_USER}
            DB_PASSWORD=${DB_PASSWORD}
            DB_NAME=${DB_NAME}
            DB_SSL_MODE=disable
            ENVEOF
          EOF

      - name: Test connectivity & copy artifacts
        run: |
          set -euo pipefail
          HOST="${{ secrets.TS_HOST }}"
          echo "Testing connectivity to $HOST..."
          if ! timeout 10 nc -zv "$HOST" 22 2>/dev/null; then
            echo "Cannot reach $HOST on port 22"
            exit 1
          fi
          echo "Port 22 reachable, copying artifacts..."
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 go-db-demo deploy@"$HOST":/tmp/go-db-demo-new
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 internal/db/migrations/*.up.sql deploy@"$HOST":/tmp/

      - name: Create/Check Database
        run: |
          set -euo pipefail
          HOST="${{ secrets.TS_HOST }}"
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy@"$HOST" \
            DB_USER="${{ secrets.DB_USER }}" \
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            DB_NAME="${{ secrets.DB_NAME }}" \
            DEPLOY_SUDO_PASSWORD="${{ secrets.DEPLOY_SUDO_PASSWORD }}" \
            bash -s <<'EOF'
            set -euo pipefail

            # Quoted identifier helpers for SQL
            quote_ident() {
              printf '"%s"' "$(printf '%s' "$1" | sed 's/"/""/g')"
            }

            DB_NAME_Q=$(quote_ident "${DB_NAME}")
            DB_USER_Q=$(quote_ident "${DB_USER}")

            # Helper: run as postgres via sudo with password
            sudop() {
              printf '%s\n' "$DEPLOY_SUDO_PASSWORD" | sudo -S -u postgres "$@"
            }

            # Create database if missing
            if ! sudop psql -v ON_ERROR_STOP=1 -tc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'" | grep -q 1; then
              sudop createdb -- "${DB_NAME}"
            fi

            # Create role if missing
            if ! sudop psql -v ON_ERROR_STOP=1 -tc "SELECT 1 FROM pg_roles WHERE rolname='${DB_USER}'" | grep -q 1; then
              sudop psql -v ON_ERROR_STOP=1 -c "CREATE ROLE ${DB_USER_Q} LOGIN PASSWORD '${DB_PASSWORD}';"
            fi

            # Grant privileges
            sudop psql -v ON_ERROR_STOP=1 -c "GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME_Q} TO ${DB_USER_Q};"
            EOF

      - name: Run Migrations
        run: |
          set -euo pipefail
          HOST="${{ secrets.TS_HOST }}"
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy@"$HOST" \
            DB_USER="${{ secrets.DB_USER }}" \
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            DB_NAME="${{ secrets.DB_NAME }}" \
            bash -s <<'EOF'
            set -euo pipefail

            # Run migrations
            for f in /tmp/*.up.sql; do
              echo "Applying migration: $f"
              PGPASSWORD="${DB_PASSWORD}" psql -U "${DB_USER}" -d "${DB_NAME}" -f "$f"
            done
            EOF

      - name: Start Application
        run: |
          set -euo pipefail
          HOST="${{ secrets.TS_HOST }}"
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy@"$HOST" bash -s <<'EOF'
            set -euo pipefail

            APP_DIR="$HOME/app"
            BIN_TMP="/tmp/go-db-demo-new"

            # Stop old process
            pkill -f go-db-demo || true
            sleep 1

            # Move binary to app directory
            mkdir -p "$APP_DIR"
            mv "$BIN_TMP" "$APP_DIR/go-db-demo"
            chmod +x "$APP_DIR/go-db-demo"

            # Start application
            cd "$APP_DIR"
            nohup ./go-db-demo > app.log 2>&1 &
            echo $! > app.pid
            EOF

      - name: Health Check
        run: |
          set -euo pipefail
          HOST="${{ secrets.TS_HOST }}"
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy@"$HOST" bash -s <<'EOF'
            set -euo pipefail

            if curl -fsS http://localhost:8080/healthz > /dev/null; then
              echo "Health check passed"
            else
              echo "Health check failed. Recent logs:"
              tail -20 ~/app/app.log || true
              exit 1
            fi
            EOF
