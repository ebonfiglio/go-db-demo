name: Simple Deploy to Ubuntu VM

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Build application
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o go-db-demo ./web/cmd

      - name: Connect to Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_CLIENT_SECRET }}
          tags: tag:ci

      - name: Check secrets
        run: |
          echo "Checking required secrets..."
          
          if [ -z "${{ secrets.TS_HOST }}" ]; then
            echo "❌ ERROR: TS_HOST secret is missing!"
            echo "Please add your server hostname to GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.DEPLOY_SSH_KEY }}" ]; then
            echo "❌ ERROR: DEPLOY_SSH_KEY secret is missing!"
            echo "Please add your SSH private key to GitHub Secrets"
            exit 1
          fi
          
          echo "✅ All secrets are configured"
          echo "✅ Connected to Tailscale network"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Try to add host key, but don't fail if it doesn't work
          ssh-keyscan -H ${{ secrets.TS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || echo "Could not scan host key, will use StrictHostKeyChecking=no"

      - name: Test connectivity and deploy
        run: |
          HOST="${{ secrets.TS_HOST }}"
          echo "Testing connectivity to $HOST..."
          
          # Test if we can reach the host
          if ! timeout 10 nc -zv $HOST 22 2>/dev/null; then
            echo "Cannot reach $HOST on port 22"
            echo "Please check network connectivity and server status"
            exit 1
          fi
          
          echo "Port 22 is reachable, deploying..."
          
          # Copy binary to server
          if ! scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 go-db-demo deploy@$HOST:/tmp/go-db-demo-new; then
            echo "Failed to copy binary to server"
            exit 1
          fi
          
          echo "Binary copied successfully"

          # Copy migration files to server
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 internal/db/migrations/*.up.sql deploy@$HOST:/tmp/ || {
            echo "Failed to copy migration files to server"; exit 1;
          }
          
          # Deploy on server
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy@$HOST << 'EOF'
            # Stop old process
            pkill -f go-db-demo || true
            sleep 2
            
            # Create app directory
            mkdir -p ~/app
            
            # Move new binary
            mv /tmp/go-db-demo-new ~/app/go-db-demo
            chmod +x ~/app/go-db-demo
            
            # Create/update .env file
            cat > ~/app/.env << 'ENVEOF'
          SERVER_HOST=0.0.0.0
          SERVER_PORT=8080
          GIN_MODE=release
          DB_HOST=localhost
          DB_PORT=5432
          DB_USER=postgres
          DB_PASSWORD=deploy
          DB_NAME=go-db-demo
          DB_SSL_MODE=disable
          ENVEOF
            
            # Setup database and run migrations
            echo "Setting up database..."
            
            # Create database if it doesn't exist
            sudo -u postgres psql -c "CREATE DATABASE \"go-db-demo\";" 2>/dev/null || echo "Database already exists"
            
            # Create user if it doesn't exist  
            sudo -u postgres psql -c "CREATE USER postgres;" 2>/dev/null || echo "User already exists"
            sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'deploy';" 2>/dev/null || true
            
            # Grant permissions
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE \"go-db-demo\" TO postgres;" 2>/dev/null || true
            
            # Run all migration files
            echo "Running migration scripts..."
            export PGPASSWORD=deploy
            for f in /tmp/*.up.sql; do
              echo "Applying migration: $f"
              psql -U postgres -d go-db-demo -h localhost -f "$f" || { echo "Migration failed: $f"; exit 1; }
            done
            
            echo "Database setup completed"
            
            # Start new process
            cd ~/app
            echo "Starting application..."
            nohup ./go-db-demo > app.log 2>&1 &
            echo $! > app.pid
            
            echo "Deployment completed"
            sleep 3
            
            # Check if it's running
            if curl -f http://localhost:8080/healthz > /dev/null 2>&1; then
              echo "Health check passed - deployment successful"
            else
              echo "Health check failed - showing logs:"
              tail -20 app.log
              exit 1
            fi
          EOF

      - name: Verify deployment
        run: |
          HOST="${{ secrets.TS_HOST }}"
          sleep 5
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy@$HOST '
            curl -f http://localhost:8080/healthz && echo "Final verification: SUCCESS"
          '
